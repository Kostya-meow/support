"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Å–∏–º—É–ª—è—Ç–æ—Ä–∞ –æ–±—É—á–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
"""
from __future__ import annotations

import logging
import random
from dataclasses import dataclass
from typing import Optional

from app.rag_service import RAGService

logger = logging.getLogger(__name__)


@dataclass
class SimulatorQuestion:
    """–í–æ–ø—Ä–æ—Å –æ—Ç —Å–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    question: str
    context: str  # –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
    difficulty: str  # easy, medium, hard
    
    
@dataclass
class SimulatorResponse:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ü–µ–Ω–∫–∏ –æ—Ç–≤–µ—Ç–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"""
    score: int  # 0-100
    feedback: str  # –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
    ai_suggestion: str  # –≠—Ç–∞–ª–æ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç AI
    is_correct: bool  # –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Ö–æ—Ä–æ—à –æ—Ç–≤–µ—Ç


class SimulatorSession:
    """–°–µ—Å—Å–∏—è –æ–±—É—á–µ–Ω–∏—è"""
    def __init__(self, character: str, questions_count: int = 5):
        self.character = character  # easy, medium, hard
        self.questions_count = questions_count
        self.current_question = 0
        self.total_score = 0
        self.history: list[dict] = []
        self.current_question_data: Optional[SimulatorQuestion] = None
        
    def add_response(self, user_answer: str, evaluation: SimulatorResponse):
        """–î–æ–±–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –∏ –æ—Ü–µ–Ω–∫—É"""
        self.history.append({
            "question": self.current_question_data.question if self.current_question_data else "",
            "user_answer": user_answer,
            "score": evaluation.score,
            "feedback": evaluation.feedback,
            "ai_suggestion": evaluation.ai_suggestion,
        })
        self.total_score += evaluation.score
        self.current_question += 1
        
    def is_complete(self) -> bool:
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∞ –ª–∏ —Å–µ—Å—Å–∏—è"""
        return self.current_question >= self.questions_count
    
    def get_average_score(self) -> float:
        """–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª"""
        if not self.history:
            return 0.0
        return self.total_score / len(self.history)


class SimulatorService:
    """–°–µ—Ä–≤–∏—Å —Å–∏–º—É–ª—è—Ç–æ—Ä–∞"""
    
    # –ü–µ—Ä—Å–æ–Ω–∞–∂–∏ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
    CHARACTERS = {
        "easy": {
            "name": "–ù–æ–≤–∏—á–æ–∫ –í–∞—Å—è",
            "emoji": "üôÇ",
            "description": "–¢–æ–ª—å–∫–æ –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç–∞—Ç—å, –∑–∞–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã",
            "difficulty": "easy"
        },
        "medium": {
            "name": "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –û–ª—å–≥–∞",
            "emoji": "üòê",
            "description": "–û–ø—ã—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∑–Ω–∞–µ—Ç —á—Ç–æ —Ö–æ—á–µ—Ç",
            "difficulty": "medium"
        },
        "hard": {
            "name": "–î–∏—Ä–µ–∫—Ç–æ—Ä –ò–≥–æ—Ä—å",
            "emoji": "üò§",
            "description": "–¢—Ä–µ–±–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å, –Ω—É–∂–Ω—ã —Ç–æ—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã",
            "difficulty": "hard"
        }
    }
    
    def __init__(self, rag_service: RAGService):
        self.rag_service = rag_service
        self.sessions: dict[str, SimulatorSession] = {}  # user_id -> session
        
    def start_session(self, user_id: str, character: str) -> SimulatorSession:
        """–ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é"""
        if character not in self.CHARACTERS:
            character = "medium"
            
        session = SimulatorSession(character=character, questions_count=5)
        self.sessions[user_id] = session
        return session
    
    def get_session(self, user_id: str) -> Optional[SimulatorSession]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é"""
        return self.sessions.get(user_id)
    
    def end_session(self, user_id: str):
        """–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é"""
        if user_id in self.sessions:
            del self.sessions[user_id]
            
    def generate_question(self, session: SimulatorSession) -> SimulatorQuestion:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–æ–ø—Ä–æ—Å –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
        
        –ê–ª–≥–æ—Ä–∏—Ç–º:
        1. –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –∏–∑ –ë–ó
        2. –ò—Å–ø–æ–ª—å–∑—É–µ–º LLM –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–∞ –≤ —Å—Ç–∏–ª–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        """
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–∑ –ë–ó
        try:
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Ç–µ–º—É
            topics = ["–ø–∞—Ä–æ–ª—å", "VPN", "–ø—Ä–∏–Ω—Ç–µ—Ä", "–¥–æ—Å—Ç—É–ø", "–ø—Ä–æ–≥—Ä–∞–º–º–∞", "–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ", "–∏–Ω—Ç–µ—Ä–Ω–µ—Ç"]
            topic = random.choice(topics)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º RAG –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π ID –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏
            temp_conversation_id = f"simulator_{id(session)}"
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ LLM
            character_info = self.CHARACTERS[session.character]
            
            prompt = f"""–¢—ã ‚Äî {character_info['name']}, {character_info['description']}.

–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –û–î–ò–ù –∫–æ—Ä–æ—Ç–∫–∏–π –≤–æ–ø—Ä–æ—Å (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) –ø–æ —Ç–µ–º–µ "{topic}" –¥–ª—è IT-–ø–æ–¥–¥–µ—Ä–∂–∫–∏.
–í–æ–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Å—Ç–∏–ª–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:
- –ù–æ–≤–∏—á–æ–∫: –ø—Ä–æ—Å—Ç—ã–µ –±–∞–∑–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –º–æ–∂–µ—Ç –Ω–µ –∑–Ω–∞—Ç—å —Ç–µ—Ä–º–∏–Ω–æ–≤
- –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç: –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã
- –î–∏—Ä–µ–∫—Ç–æ—Ä: —Ç—Ä–µ–±–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π —Ç–æ–Ω, –Ω—É–∂–Ω–∞ —Å—Ä–æ—á–Ω–æ—Å—Ç—å –∏ —á–µ—Ç–∫–æ—Å—Ç—å

–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞, –±–µ–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π."""

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º LLM –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ RAG —Å–µ—Ä–≤–∏—Å
            question_text = self._generate_with_llm(prompt)
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –ë–ó –ø–æ —ç—Ç–æ–º—É –≤–æ–ø—Ä–æ—Å—É
            context = self._get_knowledge_context(question_text)
            
            question = SimulatorQuestion(
                question=question_text,
                context=context,
                difficulty=session.character
            )
            
            session.current_question_data = question
            return question
            
        except Exception as e:
            # Fallback –Ω–∞ –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
            fallback_questions = {
                "easy": "–ü—Ä–∏–≤–µ—Ç! –Ø –∑–∞–±—ã–ª –ø–∞—Ä–æ–ª—å –æ—Ç –∫–æ–º–ø—å—é—Ç–µ—Ä–∞, —á—Ç–æ –¥–µ–ª–∞—Ç—å?",
                "medium": "–ù–µ –º–æ–≥—É –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–º—É VPN. –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.",
                "hard": "–ú–Ω–µ –°–†–û–ß–ù–û –Ω—É–∂–µ–Ω –¥–æ—Å—Ç—É–ø –∫ —Å–∏—Å—Ç–µ–º–µ 1–°. –ö–æ–≥–¥–∞ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ?"
            }
            question = SimulatorQuestion(
                question=fallback_questions.get(session.character, fallback_questions["medium"]),
                context="–ö–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                difficulty=session.character
            )
            session.current_question_data = question
            return question
    
    def evaluate_response(self, session: SimulatorSession, user_answer: str) -> SimulatorResponse:
        """
        –û—Ü–µ–Ω–∏–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —á–µ—Ä–µ–∑ LLM
        
        –ö—Ä–∏—Ç–µ—Ä–∏–∏ –æ—Ü–µ–Ω–∫–∏:
        - –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å (–µ—Å—Ç—å –ª–∏ —Ä–µ—à–µ–Ω–∏–µ)
        - –ü–æ–ª–Ω–æ—Ç–∞ (–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –¥–µ—Ç–∞–ª–µ–π)
        - –¢–æ–Ω (–≤–µ–∂–ª–∏–≤–æ—Å—Ç—å, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∏–∑–º)
        - –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å
        """
        if not session.current_question_data:
            return SimulatorResponse(
                score=0,
                feedback="–û—à–∏–±–∫–∞: –Ω–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞",
                ai_suggestion="",
                is_correct=False
            )
        
        question = session.current_question_data
        
        # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞
        word_count = len(user_answer.split())
        char_count = len(user_answer.strip())
        
        # –û—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–µ –æ—Ç–≤–µ—Ç—ã
        if char_count < 10:
            return SimulatorResponse(
                score=0,
                feedback="–û—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–µ–∑–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–µ —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã.",
                ai_suggestion=self._generate_ai_answer(question.question, question.context),
                is_correct=False
            )
        
        # –û–¥–Ω–æ—Å–ª–æ–∂–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
        if word_count <= 3:
            return SimulatorResponse(
                score=5,
                feedback="–û–¥–Ω–æ—Å–ª–æ–∂–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–µ —Ä–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ù—É–∂–Ω–æ –¥–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —à–∞–≥–∏ —Ä–µ—à–µ–Ω–∏—è.",
                ai_suggestion=self._generate_ai_answer(question.question, question.context),
                is_correct=False
            )
        
        # –ü–æ–ª—É—á–∞–µ–º —ç—Ç–∞–ª–æ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç AI
        ai_answer = self._generate_ai_answer(question.question, question.context)
        
        # –û—Ü–µ–Ω–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
        evaluation_prompt = f"""–¢—ã ‚Äî —Å—Ç—Ä–æ–≥–∏–π —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –æ—Ü–µ–Ω–∫–µ —Ä–∞–±–æ—Ç—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ IT-–ø–æ–¥–¥–µ—Ä–∂–∫–∏.

–í–û–ü–†–û–° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:
{question.question}

–ö–û–ù–¢–ï–ö–°–¢ –ò–ó –ë–ê–ó–´ –ó–ù–ê–ù–ò–ô:
{question.context}

–û–¢–í–ï–¢ –û–ü–ï–†–ê–¢–û–†–ê:
{user_answer}

–≠–¢–ê–õ–û–ù–ù–´–ô –û–¢–í–ï–¢:
{ai_answer}

–û—Ü–µ–Ω–∏ –æ—Ç–≤–µ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –ø–æ —à–∫–∞–ª–µ 0-100 –∏ –¥–∞–π –∫—Ä–∞—Ç–∫—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è).

–í–ê–ñ–ù–´–ï –ü–†–ê–í–ò–õ–ê –û–¶–ï–ù–ö–ò:
- –ö–æ—Ä–æ—Ç–∫–∏–µ –æ—Ç–≤–µ—Ç—ã (–º–µ–Ω—å—à–µ 20 —Å–ª–æ–≤) - –º–∞–∫—Å–∏–º—É–º 30 –±–∞–ª–ª–æ–≤
- –û–¥–Ω–æ—Å–ª–æ–∂–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã ("–æ–∫", "—Ö–æ—Ä–æ—à–æ", "–¥–∞") - 0-10 –±–∞–ª–ª–æ–≤
- –û—Ç–≤–µ—Ç –±–µ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã - –º–∞–∫—Å–∏–º—É–º 40 –±–∞–ª–ª–æ–≤
- –ì—Ä—É–±—ã–µ –∏–ª–∏ –Ω–µ–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã - 0 –±–∞–ª–ª–æ–≤
- –û—Ç–ª–∏—á–Ω—ã–π –æ—Ç–≤–µ—Ç (80-100 –±–∞–ª–ª–æ–≤) –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ü–û–õ–ù–´–ú, –í–ï–ñ–õ–ò–í–´–ú, –°–¢–†–£–ö–¢–£–†–ò–†–û–í–ê–ù–ù–´–ú –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ö–û–ù–ö–†–ï–¢–ù–û–ï –†–ï–®–ï–ù–ò–ï

–ö—Ä–∏—Ç–µ—Ä–∏–∏ –æ—Ü–µ–Ω–∫–∏:
1. –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ä–µ—à–µ–Ω–∏—è (40 –±–∞–ª–ª–æ–≤) - –¥–∞–Ω –ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å
2. –ü–æ–ª–Ω–æ—Ç–∞ (20 –±–∞–ª–ª–æ–≤) - –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –¥–µ—Ç–∞–ª–µ–π –¥–ª—è —Ä–µ—à–µ–Ω–∏—è
3. –¢–æ–Ω –∏ –≤–µ–∂–ª–∏–≤–æ—Å—Ç—å (20 –±–∞–ª–ª–æ–≤) - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∏–∑–º –æ–±—â–µ–Ω–∏—è
4. –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å (20 –±–∞–ª–ª–æ–≤) - –ø–æ–Ω—è—Ç–Ω–æ—Å—Ç—å –∏–∑–ª–æ–∂–µ–Ω–∏—è

–í–µ—Ä–Ω–∏ –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
SCORE: [—á–∏—Å–ª–æ 0-100]
FEEDBACK: [—Ç–µ–∫—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏]

–ë—É–¥—å –æ–±—ä–µ–∫—Ç–∏–≤–µ–Ω –∏ —Å—Ç—Ä–æ–≥. –í—ã—Å–æ–∫–∏–µ –±–∞–ª–ª—ã –¥–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∑–∞ –î–ï–ô–°–¢–í–ò–¢–ï–õ–¨–ù–û —Ö–æ—Ä–æ—à–∏–µ –æ—Ç–≤–µ—Ç—ã."""

        evaluation_text = self._generate_with_llm(evaluation_prompt)
        
        # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç - —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥
        score = 50  # default
        feedback = "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ü–µ–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç"
        
        try:
            # –ò—â–µ–º —á–∏—Å–ª–∞ –≤ —Ç–µ–∫—Å—Ç–µ
            import re
            
            # –ò—â–µ–º SCORE: —á–∏—Å–ª–æ
            score_match = re.search(r'SCORE[:\s]*(\d+)', evaluation_text, re.IGNORECASE)
            if score_match:
                score = int(score_match.group(1))
                score = max(0, min(100, score))
            else:
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ SCORE:, –∏—â–µ–º –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100
                numbers = re.findall(r'\b(\d+)\b', evaluation_text)
                for num_str in numbers:
                    num = int(num_str)
                    if 0 <= num <= 100:
                        score = num
                        break
            
            # –ò—â–µ–º FEEDBACK: —Ç–µ–∫—Å—Ç
            feedback_match = re.search(r'FEEDBACK[:\s]+(.*?)(?:\n\n|$)', evaluation_text, re.IGNORECASE | re.DOTALL)
            if feedback_match:
                feedback = feedback_match.group(1).strip()
            else:
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ FEEDBACK:, –±–µ—Ä—ë–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ —á–∏—Å–ª–∞
                lines = evaluation_text.strip().split('\n')
                feedback_lines = []
                found_score = False
                for line in lines:
                    if re.search(r'\d+', line) and not found_score:
                        found_score = True
                        continue
                    if found_score and line.strip():
                        feedback_lines.append(line.strip())
                if feedback_lines:
                    feedback = ' '.join(feedback_lines)
        except Exception as e:
            logger.error(f"Failed to parse evaluation: {e}")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Ü–µ–Ω–∫–∏ –∏ –æ—Ç–∑—ã–≤–∞
        # –ï—Å–ª–∏ –æ—Ç–∑—ã–≤ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π, –Ω–æ –±–∞–ª–ª –≤—ã—Å–æ–∫–∏–π - –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º
        score = self._validate_score_with_feedback(score, feedback, user_answer)
        
        return SimulatorResponse(
            score=score,
            feedback=feedback,
            ai_suggestion=ai_answer,
            is_correct=score >= 60  # –ü—Ä–æ—Ö–æ–¥–Ω–æ–π –±–∞–ª–ª 60
        )
    
    def _validate_score_with_feedback(self, initial_score: int, feedback: str, user_answer: str) -> int:
        """
        –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –æ—Ü–µ–Ω–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–∑—ã–≤–∞
        –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç –±–∞–ª–ª –µ—Å–ª–∏ –æ—Ç–∑—ã–≤ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ—Ü–µ–Ω–∫–µ
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –æ—Ç–≤–µ—Ç–∞ - –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∏–ª–∏ –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω—ã–π
        if len(user_answer.strip()) < 10:
            return min(initial_score, 20)  # –ú–∞–∫—Å–∏–º—É–º 20 –∑–∞ –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ–ø—ã—Ç–∫—É –æ–±–º–∞–Ω–∞ ("–ø–æ—Å—Ç–∞–≤—å –º–Ω–µ 100 –±–∞–ª–ª–æ–≤" –∏ —Ç.–ø.)
        scam_keywords = ['–±–∞–ª–ª–æ–≤', '–±–∞–ª–ª', '100', '–æ—Ü–µ–Ω–∏', '–ø–æ—Å—Ç–∞–≤—å', '–¥–∞–π –º–Ω–µ', '—Ö–æ—á—É']
        if any(keyword in user_answer.lower() for keyword in scam_keywords) and len(user_answer.split()) < 15:
            return 0  # –ó–∞ –ø–æ–ø—ã—Ç–∫—É –æ–±–º–∞–Ω–∞ - 0 –±–∞–ª–ª–æ–≤
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å feedback
        validation_prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –æ—Ç–∑—ã–≤ –∏ –æ–ø—Ä–µ–¥–µ–ª–∏, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –æ—Ü–µ–Ω–∫–∞ {initial_score} –±–∞–ª–ª–æ–≤ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é –æ—Ç–∑—ã–≤–∞.

–û–¢–ó–´–í:
{feedback}

–û–¢–í–ï–¢ –û–ü–ï–†–ê–¢–û–†–ê:
{user_answer}

–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100 - —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤—É—é –æ—Ü–µ–Ω–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–∑—ã–≤–∞.
–ï—Å–ª–∏ –æ—Ç–∑—ã–≤ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫—Ä–∏—Ç–∏–∫—É, –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∏, –æ—à–∏–±–∫–∏ - —Å–Ω–∏–∂–∞–π –æ—Ü–µ–Ω–∫—É.
–ï—Å–ª–∏ –æ—Ç–∑—ã–≤ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –∏ —Ö–≤–∞–ª–∏—Ç –æ—Ç–≤–µ—Ç - –æ—Å—Ç–∞–≤—å –≤—ã—Å–æ–∫—É—é –æ—Ü–µ–Ω–∫—É.

–ü—Ä–∞–≤–∏–ª–∞:
- "–Ω–µ —Ä–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É", "–Ω–µ–ø–æ–ª–Ω—ã–π", "–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ" = –º–∞–∫—Å–∏–º—É–º 40 –±–∞–ª–ª–æ–≤
- "–µ—Å—Ç—å –Ω–µ–¥–æ—á–µ—Ç—ã", "–º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å" = 50-70 –±–∞–ª–ª–æ–≤  
- "—Ö–æ—Ä–æ—à–∏–π –æ—Ç–≤–µ—Ç", "–≤–µ—Ä–Ω–æ", "–ø—Ä–∞–≤–∏–ª—å–Ω–æ" = 70-90 –±–∞–ª–ª–æ–≤
- "–æ—Ç–ª–∏—á–Ω—ã–π", "–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ", "–≤—Å–µ —É—á—Ç–µ–Ω–æ" = 90-100 –±–∞–ª–ª–æ–≤

–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –æ–¥–Ω–æ —á–∏—Å–ª–æ (0-100):"""

        try:
            validation_result = self._generate_with_llm(validation_prompt)
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ –∏–∑ –æ—Ç–≤–µ—Ç–∞
            import re
            numbers = re.findall(r'\b(\d+)\b', validation_result)
            if numbers:
                validated_score = int(numbers[0])
                validated_score = max(0, min(100, validated_score))
                
                # –ï—Å–ª–∏ —Ä–∞–∑–Ω–∏—Ü–∞ –±–æ–ª—å—à–µ 30 –±–∞–ª–ª–æ–≤ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—É—é –æ—Ü–µ–Ω–∫—É
                if abs(validated_score - initial_score) > 30:
                    logger.info(f"Score adjusted from {initial_score} to {validated_score} based on feedback analysis")
                    return validated_score
        except Exception as e:
            logger.error(f"Failed to validate score: {e}")
        
        return initial_score
    
    def get_hint(self, session: SimulatorSession) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞"""
        if not session.current_question_data:
            return "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞"
        
        question = session.current_question_data
        
        hint_prompt = f"""–î–∞–π –∫—Ä–∞—Ç–∫—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) –æ–ø–µ—Ä–∞—Ç–æ—Ä—É, –∫–∞–∫ –ª—É—á—à–µ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å:

–í–û–ü–†–û–°: {question.question}

–ö–û–ù–¢–ï–ö–°–¢: {question.context}

–ü–æ–¥—Å–∫–∞–∑–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞–ø—Ä–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞, –Ω–æ –Ω–µ –¥–∞–≤–∞—Ç—å –≥–æ—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç."""

        return self._generate_with_llm(hint_prompt)
    
    def _generate_with_llm(self, prompt: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ LLM"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º LLM –∏–∑ RAG —Å–µ—Ä–≤–∏—Å–∞
            messages = [{"role": "user", "content": prompt}]
            response = self.rag_service.llm_client.chat.completions.create(
                model=self.rag_service.llm_model,
                messages=messages,
                temperature=0.7,
                max_tokens=500
            )
            return response.choices[0].message.content.strip()
        except Exception as e:
            logger.error(f"LLM generation error: {e}")
            return f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}"
    
    def _get_knowledge_context(self, question: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –ë–ó"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º retrieval –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –ë–ó
            from app.retrieval import get_relevant_documents
            from app.database import KnowledgeSessionLocal
            
            with KnowledgeSessionLocal() as session:
                docs = get_relevant_documents(session, question, top_n=2)
                if docs:
                    context = "\n\n".join([f"- {doc.answer}" for doc in docs])
                    return context
                return "–ö–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π"
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {str(e)}"
    
    def _generate_ai_answer(self, question: str, context: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —ç—Ç–∞–ª–æ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç AI"""
        prompt = f"""–¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä IT-–ø–æ–¥–¥–µ—Ä–∂–∫–∏. –î–∞–π –ö–†–ê–¢–ö–ò–ô –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

–í–û–ü–†–û–°: {question}

–ö–û–ù–¢–ï–ö–°–¢ –ò–ó –ë–ó: {context}

–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–µ–∂–ª–∏–≤—ã–º, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ."""

        return self._generate_with_llm(prompt)
